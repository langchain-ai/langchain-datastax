[build-system]
requires = ["pdm-backend"]
build-backend = "pdm.backend"

[project]
authors = []
license = {text = "MIT"}
requires-python = ">=3.10.0,<4.0.0"
dependencies = [
    "langchain-core>=1.0.0,<2.0.0",
    "astrapy>=2.0.1,<3.0.0",
    "numpy>=1.21",
    "numpy>=1.26; python_version>='3.12'",
    "numpy>=2.1.0; python_version>='3.13'",
]
name = "langchain-astradb"
version = "1.0.0"
description = "An integration package connecting Astra DB and LangChain"
readme = "README.md"

[project.urls]
"Source Code" = "https://github.com/langchain-ai/langchain-datastax/tree/main/libs/astradb"
repository = "https://github.com/langchain-ai/langchain-datastax"

[dependency-groups]
lint = ["ruff<0.13,>=0.12.10"]
typing = [
    "mypy<1.18,>=1.17.1",
    "simsimd<7.0.0,>=6.5.1",
]
test = [
    "pytest<9,>=8",
    "pytest-httpserver<1.1,>=1.0.8",
    "pytest-dotenv<1.0.0,>=0.5.2",
    "freezegun<2.0.0,>=1.2.2",
    "pytest-mock<4.0.0,>=3.10.0",
    "syrupy<5.0.0,>=4.0.2",
    "pytest-watcher<1.0.0,>=0.3.4",
    "pytest-asyncio<1.0.0,>=0.21.1",
    "blockbuster<1.6.0,>=1.5.25",
]
test_integration = [
    "langchain-tests>=1.0.0,<2.0.0",
]
codespell = ["codespell<3.0.0,>=2.2.0"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
pydocstyle.convention = "google"
pep8-naming.classmethod-decorators = [
    "langchain_core.pydantic_v1.validator",
]
flake8-annotations.allow-star-arg-any = true
flake8-annotations.mypy-init-return = true
select = ["ALL"]
ignore = [
    "COM812", # Messes with the formatter
    "CPY", # No copyright
    "D101", # We prefer using the __init__ docstring to document the class
    "ERA001", # Do we want to activate (no commented code) ?
    "FIX002", # Accept TODOs
    "ISC001", # Messes with the formatter
    "PLR09", # TODO: do we enforce these ones (complexity) ?
    "TD002", # We have TODOs authors by git
    "TD003",
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "D",
    "DOC201",
    "DOC402",
    "S101",
    "SLF001",
    "T201",
    "PLC2701",
    "PLR2004",
    "PLR6301",
]
"scripts/*" = [
    "D",
    "T201",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
strict = true
enable_error_code = "deprecated"
warn_unreachable = true

# TODO: activate for 'strict' checking
disallow_any_generics = false

[tool.coverage.run]
omit = ["tests/*"]

[tool.pytest.ini_options]
# --strict-markers will raise errors on unknown marks.
# https://docs.pytest.org/en/7.1.x/how-to/mark.html#raising-errors-on-unknown-marks
#
# https://docs.pytest.org/en/7.1.x/reference/reference.html
# --strict-config       any warnings encountered while parsing the `pytest`
#                       section of the configuration file raise errors.
#
# https://github.com/tophat/syrupy
# --snapshot-warn-unused    Prints a warning on unused snapshots rather than fail the test suite.
addopts = "--snapshot-warn-unused --strict-markers --strict-config --durations=5 -vv"
# Registering custom markers.
# https://docs.pytest.org/en/7.1.x/example/markers.html#registering-markers
markers = [
  "requires: mark tests as requiring a specific library",
  "asyncio: mark tests as requiring asyncio",
  "compile: mark placeholder test used to compile integration tests without running them",
]
asyncio_mode = "auto"
filterwarnings = "ignore::pytest.PytestUnraisableExceptionWarning"
